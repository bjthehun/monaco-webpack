/******************************************************************************
 * This file was generated by langium-cli 2.0.1.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const EditQLTerminals = {
    ID: /[0-9a-zA-Z]+/,
    WS: /\s+/,
};

export interface Query extends AstNode {
    readonly $type: 'Query';
    userName: string
}

export const Query = 'Query';

export function isQuery(item: unknown): item is Query {
    return reflection.isInstance(item, Query);
}

export type EditQLAstType = {
    Query: Query
}

export class EditQLAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Query'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new EditQLAstReflection();
